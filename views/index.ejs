<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Real-Time Bus Tracker Dashboard</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <link href="https://unpkg.com/tailwindcss@^2.0/dist/tailwind.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            background-color: #f7fafc;
            color: #1a202c;
            margin: 0;
            font-family: 'Inter', sans-serif;
            height: 100vh;
            overflow: hidden;
        }

        .dashboard-container {
            display: flex;
            height: calc(100vh - 64px);
            margin-top: 64px;
            transition: all 0.3s ease;
        }

        .main-content {
            flex: 1;
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }

        .map-container {
            flex: 1;
            position: relative;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            margin: 1rem;
            overflow: hidden;
            min-height: 300px;
        }

        .map-container.minimized {
            position: absolute;
            top: 80px;
            left: 1rem;
            width: 300px;
            height: 150px;
            z-index: 1000;
        }

        #map, #heatmap {
            height: 100%;
            width: 100%;
            min-height: 300px;
        }

        .sidebar {
            width: 400px;
            background: #ffffff;
            border-left: 1px solid #e2e8f0;
            padding: 1rem;
            overflow-y: auto;
            box-shadow: -2px 0 5px rgba(0, 0, 0, 0.05);
        }

        .sidebar.expanded {
            width: calc(100% - 2rem);
            margin: 0 auto;
            z-index: 999;
            border-radius: 8px;
        }

        .sidebar.expanded .charts-wrapper {
            display: flex;
            flex-wrap: wrap;
            gap: 1rem;
            justify-content: space-between;
        }

        .sidebar h3 {
            font-size: 1.25rem;
            font-weight: 600;
            margin-bottom: 1rem;
            color: #2d3748;
        }

        .chart-container {
            background: #f7fafc;
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 1rem;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
            flex: 1 1 calc(33.33% - 1rem);
            height: calc(100vw * 0.15);
            max-height: 220px;
        }

        .metric-container {
            background: #f7fafc;
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 1rem;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
            text-align: center;
            flex: 1 1 calc(33.33% - 1rem);
            height: calc(100vw * 0.15);
            max-height: 220px;
        }

        .metric-container h4 {
            font-size: 1rem;
            font-weight: 600;
            color: #2d3748;
        }

        .metric-container p {
            font-size: 1.5rem;
            font-weight: bold;
            color: #1a202c;
        }

        .expand-button {
            background: #000000;
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 8px;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin-bottom: 1rem;
        }

        .expand-button:hover {
            background: #333333;
        }

        .navbar {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            height: 64px;
            background: #000000;
            color: white;
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 0 2rem;
            z-index: 1001;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }

        .navbar-left h1 {
            font-size: 1.5rem;
            font-weight: 600;
        }

        .navbar-right {
            display: flex;
            gap: 1rem;
            align-items: center;
        }

        .navbar-metrics {
            display: flex;
            gap: 1rem;
        }

        .metric {
            display: flex;
            align-items: center;
            font-size: 0.9rem;
        }

        .metric.positive {
            color: #68d391;
        }

        .metric.negative {
            color: #f56565;
        }

        .navbar-icon {
            width: 24px;
            height: 24px;
            cursor: pointer;
            color: #e2e8f0;
        }

        .navbar-icon:hover {
            color: #68d391;
        }

        .map-overlay {
            position: absolute;
            top: 10px;
            left: 10px;
            z-index: 1000;
            display: flex;
            gap: 10px;
        }

        .map-overlay div {
            background-color: rgba(0, 0, 0, 0.8);
            border-radius: 8px;
            padding: 8px 12px;
            font-size: 12px;
            font-weight: 500;
            color: white;
            display: flex;
            align-items: center;
            gap: 5px;
            border: 1px solid #4a5568;
        }

        .map-overlay b {
            font-size: 10px;
            color: #f6e05e;
        }

        .analytics-button, .qr-button {
            position: fixed;
            right: 420px;
            width: 48px;
            height: 48px;
            background: #000000;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
            z-index: 1001;
            border: 2px solid #e2e8f0;
        }

        .sidebar.expanded ~ .analytics-button, .sidebar.expanded ~ .qr-button {
            right: 10%;
        }

        .analytics-button {
            bottom: 90px;
        }

        .qr-button {
            bottom: 150px;
        }

        .analysis-page, .challan-portal, .attendance-portal, .staff-page {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 400px;
            max-height: 80vh;
            background: #ffffff;
            color: #1a202c;
            z-index: 1002;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.3);
            overflow-y: auto;
        }

        .analysis-page.active, .challan-portal.active, .attendance-portal.active, .staff-page.active {
            display: block;
        }

        .close-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            font-size: 20px;
            cursor: pointer;
            color: #4a5568;
        }

        .bus-label {
            background: #f56565;
            border: 1px solid #742a2a;
            padding: 2px 4px;
            font-size: 10px;
            font-weight: bold;
            border-radius: 4px;
            color: white;
            width: 70px;
            text-align: center;
        }

        .bus-label.checked {
            background: #68d391;
        }

        .bus-dot {
            border-radius: 50%;
            box-shadow: 0 0 3px rgba(0, 0, 0, 0.5);
        }

        .route-counter {
            width: 70px;
            height: 10px;
            background: #e2e8f0;
            border-radius: 4px;
            margin-top: 2px;
            position: relative;
            border: 1px solid #cbd5e0;
        }

        .route-bar {
            height: 100%;
            background: #68d391;
            border-radius: 3px 0 0 3px;
        }

        .qr-scanner-popup {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 300px;
            height: 300px;
            background: #fff;
            border-radius: 10px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);
            z-index: 10000;
            overflow: hidden;
        }

        .qr-scanner-popup.active {
            display: block;
        }

        #qr-video {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .qr-scan-line {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 2px;
            background: #68d391;
            animation: scan 2s infinite linear;
        }

        @keyframes scan {
            0% { top: 0; }
            50% { top: calc(100% - 2px); }
            100% { top: 0; }
        }

        #checkModal {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: #ffffff;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.3);
            z-index: 10001;
            color: #1a202c;
            min-width: 300px;
        }

        #checkModal input[type="number"] {
            background: #edf2f7;
            border: 1px solid #cbd5e0;
            border-radius: 5px;
            padding: 8px;
            width: 100%;
            margin-bottom: 10px;
        }

        .navbar-button {
            background: #000000;
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 5px;
            cursor: pointer;
            text-align: center;
        }

        .navbar-button:hover {
            background: #333333;
        }
    </style>
</head>
<body>
    <div class="navbar">
        <div class="navbar-left">
            <h1><span style="color: #68d391;">DT</span><span style="color: white;">Dashboard</span></h1>
        </div>
        <div class="navbar-right">
            <div class="navbar-metrics">
                <div class="metric" id="totalBusesMetric">Buses: <span>0</span></div>
                <div class="metric" id="totalRevenueMetric">Revenue: <span>Rs 0</span></div>
                <div class="metric" id="breakdownBusesMetric">Breakdowns: <span>0</span></div>
            </div>
            <svg class="navbar-icon lucide lucide-map" fill="none" stroke="currentColor" viewBox="0 0 24 24" onclick="focusMap()"><path d="M1 6v16l7-4 9 4 7-4V3l-7 4-9-4-7 4z"></path><path d="M8 2v16"></path><path d="M16 6v16"></path></svg>
            <svg class="navbar-icon lucide lucide-bar-chart" fill="none" stroke="currentColor" viewBox="0 0 24 24" onclick="toggleSidebar()"><path d="M3 3v18h18"></path><path d="M13 17h7"></path><path d="M13 12h7"></path><path d="M13 7h7"></path><path d="M3 12h8"></path><path d="M3 7h5"></path></svg>
            <svg class="navbar-icon lucide lucide-bus" fill="none" stroke="currentColor" viewBox="0 0 24 24" onclick="showBusesContent()"><path d="M8 6v6"></path><path d="M15 6v6"></path><path d="M2 12h19.6"></path><path d="M18 18h3s.5-1.7.8-2.8c.1-.4.2-.8.2-1.2 0-.4-.1-.8-.2-1.2l-1.4-5C20.1 6.8 19.1 6 18 6H4a2 2 0 0 0-2 2v10h3"></path><circle cx="7" cy="18" r="2"></circle><path d="M9 18h5"></path><circle cx="16" cy="18" r="2"></circle></svg>
            <svg class="navbar-icon lucide lucide-user-check" fill="none" stroke="currentColor" viewBox="0 0 24 24" onclick="showAttendancePortal()"><path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"></path><circle cx="9" cy="7" r="4"></circle><polyline points="16 11 18 13 22 9"></polyline></svg>
            <svg class="navbar-icon lucide lucide-file-text" fill="none" stroke="currentColor" viewBox="0 0 24 24" onclick="showChallanPortal()"><path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"></path><polyline points="14 2 14 8 20 8"></polyline><line x1="16" y1="13" x2="8" y2="13"></line><line x1="16" y1="17" x2="8" y2="17"></line><line x1="10" y1="9" x2="8" y2="9"></line></svg>
            <svg class="navbar-icon lucide lucide-users" fill="none" stroke="currentColor" viewBox="0 0 24 24" onclick="showStaffPage()"><path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path><circle cx="9" cy="7" r="4"></circle><path d="M23 21v-2a4 4 0 0 0-3-3.87"></path><path d="M16 3.13a4 4 0 0 1 0 7.75"></path></svg>
            <svg class="navbar-icon lucide lucide-qrcode" fill="none" stroke="currentColor" viewBox="0 0 24 24" onclick="openQRScanner()"><rect width="5" height="5" x="3" y="3" rx="1"></rect><rect width="5" height="5" x="16" y="3" rx="1"></rect><rect width="5" height="5" x="3" y="16" rx="1"></rect><path d="M21 16h-3a2 2 0 0 0-2 2v3"></path><path d="M21 21v.01"></path><path d="M12 7v3a2 2 0 0 1-2 2H7"></path><path d="M3 12h.01"></path><path d="M12 3h.01"></path><path d="M12 16v.01"></path><path d="M16 12h1"></path><path d="M21 12v.01"></path><path d="M12 21v-1"></path></svg>
            <svg class="navbar-icon lucide lucide-map-pin" fill="none" stroke="currentColor" viewBox="0 0 24 24" onclick="goToUserLocation()"><path d="M20 10c0 4.993-5.539 10.193-7.399 11.799a1 1 0 0 1-1.202 0C9.539 20.193 4 14.993 4 10a8 8 0 0 1 16 0"></path><circle cx="12" cy="10" r="3"></circle></svg>
            <svg class="navbar-icon lucide lucide-bar-chart-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" onclick="showAnalysisPage()"><path d="M18 20V10"></path><path d="M12 20V4"></path><path d="M6 20v-6"></path></svg>
        </div>
    </div>

    <div class="dashboard-container">
        <div class="main-content">
            <div class="map-container" id="mapContainer">
                <div id="map"></div>
                <div class="map-overlay">
                    <div>
                        <svg class="w-5 h-5 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path d="M20 10c0 4.993-5.539 10.193-7.399 11.799a1 1 0 0 1-1.202 0C9.539 20.193 4 14.993 4 10a8 8 0 0 1 16 0"></path><circle cx="12" cy="10" r="3"></circle></svg>
                        <span id="nearest-stop">Nearest Stop: Loading...</span>
                    </div>
                    <div>
                        <svg class="w-5 h-5 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path d="M8 6v6"></path><path d="M15 6v6"></path><path d="M2 12h19.6"></path><path d="M18 18h3s.5-1.7.8-2.8c.1-.4.2-.8.2-1.2 0-.4-.1-.8-.2-1.2l-1.4-5C20.1 6.8 19.1 6 18 6H4a2 2 0 0 0-2 2v10h3"></path><circle cx="7" cy="18" r="2"></circle><path d="M9 18h5"></path><circle cx="16" cy="18" r="2"></circle></svg>
                        <span id="bus-arriving">Bus Arriving: Loading...</span>
                    </div>
                </div>
            </div>
        </div>
        <div class="sidebar" id="sidebar">
            <div class="expand-button" onclick="toggleSidebar()">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" id="expandIcon"><path d="M9 5l7 7-7 7"></path></svg>
                <span id="expandText">Expand Dashboard</span>
            </div>
            <h3>Analytics Dashboard</h3>
            <div class="charts-wrapper">
                <div class="chart-container">
                    <h4 class="text-sm font-medium">Revenue per Bus</h4>
                    <canvas id="revenuePerBusCanvas"></canvas>
                </div>
                <div class="chart-container">
                    <h4 class="text-sm font-medium">Revenue per Route</h4>
                    <canvas id="revenuePerRouteCanvas"></canvas>
                </div>
                <div class="chart-container">
                    <h4 class="text-sm font-medium">DTC Loss</h4>
                    <canvas id="dtcLossCanvas"></canvas>
                </div>
                <div class="chart-container">
                    <h4 class="text-sm font-medium">Mileage of Bus</h4>
                    <canvas id="mileagePerBusCanvas"></canvas>
                </div>
                <div class="chart-container">
                    <h4 class="text-sm font-medium">Cost of Running Bus</h4>
                    <canvas id="costPerBusCanvas"></canvas>
                </div>
                <div class="chart-container">
                    <h4 class="text-sm font-medium">Bus with Maximum Ticket Defaulters</h4>
                    <canvas id="defaultersPerBusCanvas"></canvas>
                </div>
                <div class="chart-container">
                    <h4 class="text-sm font-medium">Route Completions per Bus</h4>
                    <canvas id="routeCompletionsCanvas"></canvas>
                </div>
                <div class="chart-container">
                    <h4 class="text-sm font-medium">Route Defaulters Heatmap</h4>
                    <div id="heatmap" style="height: 180px;"></div>
                </div>
                <div class="metric-container">
                    <h4>Total Buses Running</h4>
                    <p id="totalBuses">0</p>
                </div>
                <div class="metric-container">
                    <h4>Total Active Ticket Checker Staff</h4>
                    <p id="totalStaff">0</p>
                </div>
                <div class="metric-container">
                    <h4>Total Fine Collected</h4>
                    <p id="totalFine">Rs 0</p>
                </div>
            </div>
        </div>
    </div>

    <div class="analytics-button" onclick="showAnalysisPage()">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path d="M3 3v18h18"></path><path d="M13 17h7"></path><path d="M13 12h7"></path><path d="M13 7h7"></path><path d="M3 12h8"></path><path d="M3 7h5"></path></svg>
    </div>
    <div class="qr-button" onclick="openQRScanner()">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"><rect width="5" height="5" x="3" y="3" rx="1"></rect><rect width="5" height="5" x="16" y="3" rx="1"></rect><rect width="5" height="5" x="3" y="16" rx="1"></rect><path d="M21 16h-3a2 2 0 0 0-2 2v3"></path><path d="M21 21v.01"></path><path d="M12 7v3a2 2 0 0 1-2 2H7"></path><path d="M3 12h.01"></path><path d="M12 3h.01"></path><path d="M12 16v.01"></path><path d="M16 12h1"></path><path d="M21 12v.01"></path><path d="M12 21v-1"></path></svg>
    </div>

    <div class="qr-scanner-popup" id="qrScannerPopup">
        <video id="qr-video"></video>
        <div class="qr-scan-line"></div>
        <span class="close-btn" onclick="closeQRScanner()">×</span>
    </div>

    <div class="analysis-page" id="analysisPage">
        <span class="close-btn" onclick="hideAnalysisPage()">×</span>
        <h2 class="text-lg font-semibold">Ticket Checker Analytics</h2>
        <p>Total Challan Collection: Rs5,000</p>
        <p>Buses Checked: 150</p>
        <canvas id="histogramCanvas"></canvas>
    </div>

    <div class="challan-portal" id="challanPortal">
        <span class="close-btn" onclick="hideChallanPortal()">×</span>
        <h2 class="text-lg font-semibold">Bus Challan Portal</h2>
        <form id="challanForm" class="flex flex-col gap-4">
            <label for="phoneNo">Phone Number:</label>
            <input type="tel" id="phoneNo" name="phoneNo" required class="p-2 border rounded">
            <label for="aadharNo">Aadhar Number:</label>
            <input type="text" id="aadharNo" name="aadharNo" required class="p-2 border rounded">
            <button type="submit" class="navbar-button">Submit Challan</button>
        </form>
    </div>

    <div class="attendance-portal" id="attendancePortal">
        <span class="close-btn" onclick="hideAttendancePortal()">×</span>
        <h2 class="text-lg font-semibold">Attendance Portal</h2>
        <form id="attendanceForm" class="flex flex-col gap-4">
            <label for="nearbyBuses">Select Bus:</label>
            <select id="nearbyBuses" name="nearbyBuses" onchange="updateBusDetails()" class="p-2 border rounded">
                <option value="">Select a bus</option>
            </select>
            <label for="busNo">Bus Number:</label>
            <input type="text" id="busNo" name="busNo" required class="p-2 border rounded">
            <label for="routeNo">Route No (Route Name):</label>
            <input type="text" id="routeNo" name="routeNo" required class="p-2 border rounded">
            <label for="conductorId">Conductor ID Number:</label>
            <input type="text" id="conductorId" name="conductorId" required class="p-2 border rounded">
            <label for="conductorWaiver">Conductor Waiver Number:</label>
            <input type="text" id="conductorWaiver" name="conductorWaiver" required class="p-2 border rounded">
            <button type="submit" class="navbar-button">Submit Attendance</button>
        </form>
    </div>

    <div class="staff-page" id="staffPage">
        <span class="close-btn" onclick="hideStaffPage()">×</span>
        <h2 class="text-lg font-semibold">Staff Management</h2>
        <p>Active Staff: <span id="staffCount">0</span></p>
    </div>

    <div id="checkModal">
        <h3 class="text-lg font-semibold">Bus Check Details</h3>
        <form id="checkForm" class="flex flex-col gap-4">
            <input type="hidden" id="checkBusNo" name="busNo">
            <input type="hidden" id="checkRouteNo" name="routeNo">
            <label for="nonTicketHolders">Non-Ticket Holders:</label>
            <input type="number" id="nonTicketHolders" name="nonTicketHolders" min="0" required>
            <label for="fineCollected">Fine Collected (Rs):</label>
            <input type="number" id="fineCollected" name="fineCollected" min="0" step="1" required>
            <div class="flex gap-2 justify-center">
                <button type="submit" class="navbar-button">Submit</button>
                <button type="button" class="navbar-button" onclick="closeCheckModal()">Cancel</button>
            </div>
        </form>
    </div>

    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script src="https://unpkg.com/leaflet.heat@0.2.0/dist/leaflet-heat.js"></script>
    <script>
        // Initialize Map
        const map = L.map('map', {
            center: [28.6139, 77.2090],
            zoom: 12,
            zoomControl: false
        });

        L.tileLayer('https://tile.jawg.io/jawg-streets/{z}/{x}/{y}{r}.png?access-token=yY3fr8FU86SQBCMHs2a8Fk3X3ef9sOjQ5yZspu3Bl16bSAjGC6dx4evddIDcMxG5', {
            minZoom: 0,
            maxZoom: 22
        }).addTo(map);

        // Initialize Heatmap
        const heatmap = L.map('heatmap', {
            center: [28.6139, 77.2090],
            zoom: 12,
            zoomControl: false,
            dragging: false,
            scrollWheelZoom: false
        });

        L.tileLayer('https://tile.jawg.io/jawg-streets/{z}/{x}/{y}{r}.png?access-token=yY3fr8FU86SQBCMHs2a8Fk3X3ef9sOjQ5yZspu3Bl16bSAjGC6dx4evddIDcMxG5', {
            minZoom: 0,
            maxZoom: 22
        }).addTo(heatmap);

        let heatLayer = L.heatLayer([], { radius: 25, blur: 15 }).addTo(heatmap);

        // Initialize Charts
        let revenuePerBusChart, revenuePerRouteChart, dtcLossChart;
        let mileagePerBusChart, costPerBusChart, defaultersPerBusChart, routeCompletionsChart;

        function initializeCharts() {
            revenuePerBusChart = new Chart(document.getElementById('revenuePerBusCanvas'), {
                type: 'bar',
                data: { labels: [], datasets: [{ label: 'Revenue (Rs)', data: [], backgroundColor: 'rgba(104, 211, 145, 0.6)' }] },
                options: { responsive: true, maintainAspectRatio: false, scales: { y: { beginAtZero: true } } }
            });

            revenuePerRouteChart = new Chart(document.getElementById('revenuePerRouteCanvas'), {
                type: 'bar',
                data: { labels: [], datasets: [{ label: 'Revenue (Rs)', data: [], backgroundColor: 'rgba(104, 211, 145, 0.6)' }] },
                options: { responsive: true, maintainAspectRatio: false, scales: { y: { beginAtZero: true } } }
            });

            dtcLossChart = new Chart(document.getElementById('dtcLossCanvas'), {
                type: 'line',
                data: { labels: [], datasets: [{ label: 'Loss (Rs)', data: [], borderColor: 'rgba(255, 99, 132, 1)', fill: false }] },
                options: { responsive: true, maintainAspectRatio: false, scales: { y: { beginAtZero: true } } }
            });

            mileagePerBusChart = new Chart(document.getElementById('mileagePerBusCanvas'), {
                type: 'bar',
                data: { labels: [], datasets: [{ label: 'Mileage (km/kg)', data: [], backgroundColor: 'rgba(104, 211, 145, 0.6)' }] },
                options: { responsive: true, maintainAspectRatio: false, scales: { y: { beginAtZero: true } } }
            });

            costPerBusChart = new Chart(document.getElementById('costPerBusCanvas'), {
                type: 'bar',
                data: { labels: [], datasets: [{ label: 'Cost (Rs)', data: [], backgroundColor: 'rgba(104, 211, 145, 0.6)' }] },
                options: { responsive: true, maintainAspectRatio: false, scales: { y: { beginAtZero: true } } }
            });

            defaultersPerBusChart = new Chart(document.getElementById('defaultersPerBusCanvas'), {
                type: 'bar',
                data: { labels: [], datasets: [{ label: 'Non-Ticket Holders', data: [], backgroundColor: 'rgba(104, 211, 145, 0.6)' }] },
                options: { responsive: true, maintainAspectRatio: false, scales: { y: { beginAtZero: true } } }
            });

            routeCompletionsChart = new Chart(document.getElementById('routeCompletionsCanvas'), {
                type: 'bar',
                data: { labels: [], datasets: [{ label: 'Completions', data: [], backgroundColor: 'rgba(104, 211, 145, 0.6)' }] },
                options: { responsive: true, maintainAspectRatio: false, scales: { y: { beginAtZero: true } } }
            });
        }

        function drawRevenuePerBusChart(data) {
            const topData = data.sort((a, b) => b.revenue - a.revenue).slice(0, 10);
            revenuePerBusChart.data.labels = topData.map(item => item.busNo);
            revenuePerBusChart.data.datasets[0].data = topData.map(item => item.revenue.toFixed(2));
            revenuePerBusChart.update();
        }

        function drawRevenuePerRouteChart(data) {
            const topData = data.sort((a, b) => b.revenue - a.revenue).slice(0, 10);
            revenuePerRouteChart.data.labels = topData.map(item => item.routeName);
            revenuePerRouteChart.data.datasets[0].data = topData.map(item => item.revenue.toFixed(2));
            revenuePerRouteChart.update();
        }

        function drawDtcLossChart(data) {
            dtcLossChart.data.labels = data.map(item => item.date);
            dtcLossChart.data.datasets[0].data = data.map(item => item.loss.toFixed(2));
            dtcLossChart.update();
        }

        function drawMileagePerBusChart(data) {
            const topData = data.sort((a, b) => b.mileage - a.mileage).slice(0, 10);
            mileagePerBusChart.data.labels = topData.map(item => item.busNo);
            mileagePerBusChart.data.datasets[0].data = topData.map(item => item.mileage.toFixed(2));
            mileagePerBusChart.update();
        }

        function drawCostPerBusChart(data) {
            const topData = data.sort((a, b) => b.cost - a.cost).slice(0, 10);
            costPerBusChart.data.labels = topData.map(item => item.busNo);
            costPerBusChart.data.datasets[0].data = topData.map(item => item.cost.toFixed(2));
            costPerBusChart.update();
        }

        function drawDefaultersPerBusChart(data) {
            const topData = data.sort((a, b) => b.nonTicketHolders - a.nonTicketHolders).slice(0, 10);
            defaultersPerBusChart.data.labels = topData.map(item => item.busNo);
            defaultersPerBusChart.data.datasets[0].data = topData.map(item => item.nonTicketHolders);
            defaultersPerBusChart.update();
        }

        function drawRouteCompletionsChart(data) {
            const topData = data.sort((a, b) => b.completions - a.completions).slice(0, 10);
            routeCompletionsChart.data.labels = topData.map(item => `${item.busNo} (${item.routeName})`);
            routeCompletionsChart.data.datasets[0].data = topData.map(item => item.completions);
            routeCompletionsChart.update();
        }

        function updateHeatmap(defaultersData, revenueData) {
            const points = defaultersData.map(item => [
                item.latitude || 28.6139,
                item.longitude || 77.2090,
                item.nonTicketHolders || 0
            ]);
            heatLayer.setLatLngs(points);
        }

        async function fetchChartData() {
            const baseUrl = window.location.hostname === 'localhost' ? 'http://localhost:3000' : 'https://bus-19wu.onrender.com';
            try {
                const response = await fetch(`${baseUrl}/api/analytics`, {
                    credentials: 'include'
                });
                if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                const data = await response.json();
                drawRevenuePerBusChart(data.revenuePerBus || []);
                drawRevenuePerRouteChart(data.revenuePerRoute || []);
                drawDtcLossChart(data.dtcLoss || []);
                drawMileagePerBusChart(data.mileagePerBus || []);
                drawCostPerBusChart(data.costPerBus || []);
                drawDefaultersPerBusChart(data.defaultersPerBus || []);
                drawRouteCompletionsChart(data.routeCompletions || []);
                updateHeatmap(data.defaultersPerBus || [], data.revenuePerRoute || []);
                document.getElementById('totalBuses').textContent = data.totalBuses || 0;
                document.getElementById('totalStaff').textContent = data.totalStaff || 0;
                document.getElementById('totalFine').textContent = `Rs ${data.totalFineCollected || 0}`;
                updateNavbarMetrics(data.totalBuses, data.totalRevenue || 0, data.breakdownBuses || 0);
            } catch (err) {
                console.error('Error fetching chart data:', err);
            }
        }

        function updateNavbarMetrics(totalBuses, totalRevenue, breakdownBuses) {
            const totalBusesSpan = document.getElementById('totalBusesMetric').querySelector('span');
            const totalRevenueSpan = document.getElementById('totalRevenueMetric').querySelector('span');
            const breakdownBusesSpan = document.getElementById('breakdownBusesMetric').querySelector('span');

            totalBusesSpan.textContent = totalBuses;
            totalRevenueSpan.textContent = `Rs ${totalRevenue.toFixed(2)}`;
            breakdownBusesSpan.textContent = breakdownBuses;

            totalBusesSpan.parentElement.classList.toggle('positive', totalBuses > 0);
            totalRevenueSpan.parentElement.classList.toggle('positive', totalRevenue > 0);
            breakdownBusesSpan.parentElement.classList.toggle('negative', breakdownBuses > 0);
        }

        function toggleSidebar() {
            const sidebar = document.getElementById('sidebar');
            const mapContainer = document.getElementById('mapContainer');
            const expandIcon = document.getElementById('expandIcon');
            const expandText = document.getElementById('expandText');

            sidebar.classList.toggle('expanded');
            mapContainer.classList.toggle('minimized');

            if (sidebar.classList.contains('expanded')) {
                expandIcon.innerHTML = '<path d="M15 5l-7 7 7 7"></path>';
                expandText.textContent = 'Collapse Dashboard';
            } else {
                expandIcon.innerHTML = '<path d="M9 5l7 7-7 7"></path>';
                expandText.textContent = 'Expand Dashboard';
            }

            setTimeout(() => {
                map.invalidateSize();
                heatmap.invalidateSize();
            }, 300);
        }

        function focusMap() {
            const sidebar = document.getElementById('sidebar');
            if (sidebar.classList.contains('expanded')) {
                toggleSidebar();
            }
            map.setView([28.6139, 77.2090], 12);
        }

        function showBusesContent() {
            alert('Buses content functionality to be implemented');
        }

        function showAnalysisPage() {
            document.getElementById('analysisPage').classList.add('active');
        }

        function hideAnalysisPage() {
            document.getElementById('analysisPage').classList.remove('active');
        }

        function showChallanPortal() {
            document.getElementById('challanPortal').classList.add('active');
        }

        function hideChallanPortal() {
            document.getElementById('challanPortal').classList.remove('active');
        }

        function showAttendancePortal() {
            document.getElementById('attendancePortal').classList.add('active');
            updateNearbyBuses();
        }

        function hideAttendancePortal() {
            document.getElementById('attendancePortal').classList.remove('active');
        }

        function showStaffPage() {
            document.getElementById('staffPage').classList.add('active');
        }

        function hideStaffPage() {
            document.getElementById('staffPage').classList.remove('active');
        }

        function openQRScanner() {
            document.getElementById('qrScannerPopup').classList.add('active');
            startQRScanner();
        }

        function closeQRScanner() {
            document.getElementById('qrScannerPopup').classList.remove('active');
            stopQRScanner();
        }

        let qrStream = null;

        function startQRScanner() {
            const video = document.getElementById('qr-video');
            if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
                navigator.mediaDevices.getUserMedia({ video: { facingMode: 'environment' } })
                    .then(stream => {
                        qrStream = stream;
                        video.srcObject = stream;
                        video.play();
                        scanQRCode(video);
                    })
                    .catch(err => {
                        console.error('Error accessing camera:', err);
                        closeQRScanner();
                    });
            } else {
                alert('QR scanning is not supported on this device');
                closeQRScanner();
            }
        }

        function stopQRScanner() {
            if (qrStream) {
                qrStream.getTracks().forEach(track => track.stop());
                qrStream = null;
            }
        }

        function scanQRCode(video) {
            console.log('QR scanning not fully implemented');
            setTimeout(() => {
                alert('QR scanning functionality requires additional library (e.g., jsQR)');
                closeQRScanner();
            }, 5000);
        }

        document.addEventListener('DOMContentLoaded', () => {
            map.invalidateSize();
            initializeCharts();
            fetchChartData();
            checkGeolocationPermission();

            const nonTicketHoldersInput = document.getElementById('nonTicketHolders');
            const fineCollectedInput = document.getElementById('fineCollected');
            nonTicketHoldersInput.addEventListener('input', function() {
                const nonTicketHolders = parseInt(this.value) || 0;
                const fineAmount = nonTicketHolders * 200;
                fineCollectedInput.value = fineAmount;
            });

            document.addEventListener('click', function(event) {
                const attendancePortal = document.getElementById('attendancePortal');
                const checkModal = document.getElementById('checkModal');
                if (attendancePortal.classList.contains('active') && 
                    !attendancePortal.contains(event.target) && 
                    !event.target.closest('.navbar-button')) {
                    hideAttendancePortal();
                }
                if (checkModal.style.display === 'block' && 
                    !checkModal.contains(event.target) && 
                    !event.target.closest('input[type="checkbox"]')) {
                    closeCheckModal();
                }
            });

            document.getElementById('attendanceForm').onsubmit = async function(e) {
                e.preventDefault();
                const busNo = document.getElementById('busNo').value;
                const routeNo = document.getElementById('routeNo').value;
                const conductorId = document.getElementById('conductorId').value;
                const conductorWaiver = document.getElementById('conductorWaiver').value;

                const payload = { busNo, routeNo, conductorId, conductorWaiver };
                const baseUrl = window.location.hostname === 'localhost' ? 'http://localhost:3000' : 'https://bus-19wu.onrender.com';
                try {
                    const response = await fetch(`${baseUrl}/api/recordAttendance`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload),
                        credentials: 'include'
                    });
                    if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                    const result = await response.json();
                    if (result.success) {
                        alert('Attendance recorded successfully');
                        hideAttendancePortal();
                    } else {
                        alert('Failed to record attendance');
                    }
                } catch (err) {
                    console.error('Error recording attendance:', err);
                    alert('Error recording attendance');
                }
            };

            document.getElementById('challanForm').onsubmit = function(e) {
                e.preventDefault();
                alert('Challan submitted (placeholder)');
                hideChallanPortal();
            };
        });

        const stopIcon = L.divIcon({
            className: 'bus-stop-icon',
            html: '<svg xmlns="http://www.w3.org/2000/svg" height="12" width="13.5" viewBox="0 0 576 512"><path fill="#1f13c3" d="M288 0C422.4 0 512 35.2 512 80l0 16 0 32c17.7 0 32 14.3 32 32l0 64c0 17.7-14.3 32-32 32l0 160c0 17.7-14.3 32-32 32l0 32c0 17.7-14.3 32-32 32l-32 0c-17.7 0-32-14.3-32-32l0-32-192 0 0 32c0 17.7-14.3 32-32 32l-32 0c-17.7 0-32-14.3-32-32l0-32c-17.7 0-32-14.3-32-32l0-160c-17.7 0-32-14.3-32-32l0-64c0-17.7 14.3-32 32-32c0 0 0 0 0 0l0-32s0 0 0 0l0-16C64 35.2 153.6 0 288 0zM128 160l0 96c0 17.7 14.3 32 32 32l112 0 0-160-112 0c-17.7 0-32 14.3-32 32zM304 288l112 0c17.7 0 32-14.3 32-32l0-96c0-17.7-14.3-32-32-32l-112 0 0 160zM144 400a32 32 0 1 0 0-64 32 32 0 1 0 0 64zm288 0a32 32 0 1 0 0-64 32 32 0 1 0 0 64zM384 80c0-8.8-7.2-16-16-16L208 64c-8.8 0-16 7.2-16 16s7.2 16 16 16l160 0c8.8 0 16-7.2 16-16z"/></svg>',
            iconSize: [25, 25],
            iconAnchor: [12.5, 25],
            popupAnchor: [0, -25]
        });

        const userIcon = L.divIcon({
            className: 'user-location-icon',
            html: '<svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" viewBox="0 0 24 24" fill="none" stroke="#0000FF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="5"></circle></svg>',
            iconSize: [35, 35],
            iconAnchor: [17.5, 17.5],
            popupAnchor: [0, 0]
        });

        let userMarker = null;
        const busMarkers = {};
        const stopCircles = {};
        let allBuses = [];
        const busStopMarkers = {};
        let hasGeoPermission = false;
        const ZOOM_THRESHOLD = 14;
        const BUS_LABEL_SIZE = [70, 20];
        const updatingBuses = new Set();

        const initialBuses = <%- JSON.stringify(buses) %> || [];
        let initialBusStops = <%- JSON.stringify(busStops) %> || [];

        function calculateDistance(lat1, lon1, lat2, lon2) {
            const R = 6371;
            const dLat = (lat2 - lat1) * Math.PI / 180;
            const dLon = (lon2 - lon1) * Math.PI / 180;
            const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
                Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * 
                Math.sin(dLon/2) * Math.sin(dLon/2);
            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
            return R * c;
        }

        function findNearestLocations(userLat, userLon, buses, stops) {
            const stopsWithDistance = stops.map(stop => ({
                ...stop,
                distance: calculateDistance(userLat, userLon, stop.latitude, stop.longitude)
            })).sort((a, b) => a.distance - b.distance);

            const busesWithDistance = buses.map(bus => ({
                ...bus,
                distance: calculateDistance(userLat, userLon, bus.latitude, bus.longitude)
            })).sort((a, b) => a.distance - b.distance);

            return {
                nearestStop: stopsWithDistance[0] || { name: 'Unknown', distance: 0 },
                nearestBuses: busesWithDistance.slice(0, 4),
                nearbyStops: stopsWithDistance.slice(0, 3)
            };
        }

        function updateNearestDisplay(nearestStop, nearestBuses, nearbyStops) {
            document.getElementById('nearest-stop').innerHTML = `Nearest Stop<b> ${nearestStop.name} (${(nearestStop.distance * 1000).toFixed(0)}m)</b>`;
            if (nearestBuses.length > 0) {
                document.getElementById('bus-arriving').innerHTML = `Bus <b>${nearestBuses[0].busNo} (${nearestBuses[0].routeName})</b>`;
            } else {
                document.getElementById('bus-arriving').innerText = `Bus Arriving: None`;
            }
        }

        function updateNearbyBuses() {
            const select = document.getElementById('nearbyBuses');
            select.innerHTML = '<option value="">Select a bus</option>';
            if (userMarker) {
                const nearest = findNearestLocations(
                    userMarker.getLatLng().lat,
                    userMarker.getLatLng().lng,
                    allBuses,
                    initialBusStops
                );
                nearest.nearestBuses.forEach(bus => {
                    const option = document.createElement('option');
                    option.value = bus.busNo;
                    option.textContent = `${bus.busNo} (${bus.routeName})`;
                    select.appendChild(option);
                });
            }
        }

        function updateBusDetails() {
            const busNo = document.getElementById('nearbyBuses').value;
            const bus = allBuses.find(b => b.busNo === busNo);
            if (bus) {
                document.getElementById('busNo').value = bus.busNo;
                document.getElementById('routeNo').value = bus.routeName;
            } else {
                document.getElementById('busNo').value = '';
                document.getElementById('routeNo').value = '';
            }
        }

        function handleCheck(busNo, checked, routeNo) {
            if (checked) {
                showCheckModal(busNo, routeNo);
            }
        }

        function showCheckModal(busNo, routeNo) {
            document.getElementById('checkBusNo').value = busNo;
            document.getElementById('checkRouteNo').value = routeNo;
            document.getElementById('nonTicketHolders').value = '';
            document.getElementById('fineCollected').value = '';
            document.getElementById('checkModal').style.display = 'block';
        }

        function closeCheckModal() {
            document.getElementById('checkModal').style.display = 'none';
        }

        document.getElementById('checkForm').onsubmit = async function(e) {
            e.preventDefault();
            const busNo = document.getElementById('checkBusNo').value;
            const routeNo = document.getElementById('checkRouteNo').value;
            const nonTicketHolders = parseInt(document.getElementById('nonTicketHolders').value) || 0;
            const fineCollected = parseInt(document.getElementById('fineCollected').value) || 0;

            const payload = { busNo, routeNo, nonTicketHolders, fineCollected };
            closeCheckModal();
            updatingBuses.add(busNo);
            updateNearestDisplay(
                findNearestLocations(
                    userMarker ? userMarker.getLatLng().lat : 28.6139,
                    userMarker ? userMarker.getLatLng().lng : 77.2090,
                    allBuses,
                    initialBusStops
                ).nearestStop,
                allBuses.map(bus => ({
                    ...bus,
                    distance: calculateDistance(
                        userMarker ? userMarker.getLatLng().lat : 28.6139,
                        userMarker ? userMarker.getLatLng().lng : 77.2090,
                        bus.latitude,
                        bus.longitude
                    )
                })).sort((a, b) => a.distance - b.distance).slice(0, 4),
                initialBusStops.slice(0, 3)
            );

            const baseUrl = window.location.hostname === 'localhost' ? 'http://localhost:3000' : 'https://bus-19wu.onrender.com';
            try {
                const response = await fetch(`${baseUrl}/api/checkBus`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload),
                    credentials: 'include'
                });
                if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                const result = await response.json();
                if (result.success) {
                    updatingBuses.delete(busNo);
                    updateNearestDisplay(
                        findNearestLocations(
                            userMarker ? userMarker.getLatLng().lat : 28.6139,
                            userMarker ? userMarker.getLatLng().lng : 77.2090,
                            allBuses,
                            initialBusStops
                        ).nearestStop,
                        allBuses.map(bus => ({
                            ...bus,
                            distance: calculateDistance(
                                userMarker ? userMarker.getLatLng().lat : 28.6139,
                                userMarker ? userMarker.getLatLng().lng : 77.2090,
                                bus.latitude,
                                bus.longitude
                            )
                        })).sort((a, b) => a.distance - b.distance).slice(0, 4),
                        initialBusStops.slice(0, 3)
                    );
                    fetchChartData();
                } else {
                    updatingBuses.delete(busNo);
                    const busIndex = allBuses.findIndex(b => b.busNo === busNo);
                    if (busIndex !== -1) {
                        allBuses[busIndex].checked = false;
                        updateBusMarkers(allBuses, initialBusStops);
                    }
                }
            } catch (err) {
                console.error('Error checking bus:', err);
                updatingBuses.delete(busNo);
                const busIndex = allBuses.findIndex(b => b.busNo === busNo);
                if (busIndex !== -1) {
                    allBuses[busIndex].checked = false;
                    updateBusMarkers(allBuses, initialBusStops);
                }
            }
        };

        function generateRouteCounter(completions) {
            const percentage = Math.min((completions / 5) * 100, 100);
            return `
                <div class="route-counter">
                    <div class="route-bar" style="width: ${percentage}%"></div>
                </div>
            `;
        }

        function adjustMarkerOpacity(zoom) {
            const opacity = zoom > 16 ? 1 : zoom > 11 ? 0.9 : 0.4;
            Object.values(busMarkers).forEach(marker => {
                const element = marker.getElement();
                if (element && element.classList.contains('bus-label')) {
                    element.style.opacity = opacity;
                }
            });
        }

        function filterBusesInBounds(buses) {
            const bounds = map.getBounds();
            return buses.filter(bus => bounds.contains([bus.latitude, bus.longitude]));
        }

        async function fetchRouteCompletions(busNo, routeName) {
            const baseUrl = window.location.hostname === 'localhost' ? 'http://localhost:3000' : 'https://bus-19wu.onrender.com';
            try {
                const response = await fetch(`${baseUrl}/api/routeCompletions?busNo=${busNo}&routeName=${routeName}`, {
                    credentials: 'include'
                });
                if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                const data = await response.json();
                return data.completions || 0;
            } catch (err) {
                console.error('Error fetching route completions:', err);
                return 0;
            }
        }

        async function updateBusMarkers(buses, stops) {
            allBuses = buses;
            const visibleBuses = filterBusesInBounds(buses);
            const zoomLevel = map.getZoom();
            const useLabels = zoomLevel >= ZOOM_THRESHOLD;

            Object.keys(busMarkers).forEach(busNo => {
                if (!visibleBuses.find(bus => bus.busNo === busNo)) {
                    map.removeLayer(busMarkers[busNo]);
                    if (stopCircles[busNo]) {
                        map.removeLayer(stopCircles[busNo]);
                        delete stopCircles[busNo];
                    }
                    delete busMarkers[busNo];
                }
            });

            for (const bus of visibleBuses) {
                const { busNo, latitude, longitude, routeNo, routeName, checked, stopsRemaining = 0, mileage, ticketRevenue, fineRevenue } = bus;
                const nearbyStop = stops.find(stop => 
                    calculateDistance(latitude, longitude, stop.latitude, stop.longitude) < 0.05
                );

                const routeCompletions = await fetchRouteCompletions(busNo, routeName);
                const counterHtml = generateRouteCounter(routeCompletions);
                const busDotIcon = L.divIcon({
                    className: 'bus-dot',
                    html: `<div style="width: 10px; height: 10px; background: ${checked ? '#68d391' : '#f56565'}; border-radius: 50%;"></div>`,
                    iconSize: [10, 10],
                    iconAnchor: [5, 5]
                });

                const totalRevenue = ((ticketRevenue || 0) + (fineRevenue || 0)).toFixed(2);
                if (busMarkers[busNo]) {
                    const marker = busMarkers[busNo];
                    const newLatLng = new L.LatLng(latitude, longitude);
                    animateMarker(marker, marker.getLatLng(), newLatLng);
                    if (useLabels) {
                        marker.setIcon(L.divIcon({
                            className: 'bus-label-container',
                            html: `
                                <div class="bus-label ${checked ? 'checked' : ''}">
                                    ${busNo} (${routeName})
                                </div>
                                ${counterHtml}
                            `,
                            iconSize: BUS_LABEL_SIZE,
                            iconAnchor: [BUS_LABEL_SIZE[0] / 2, BUS_LABEL_SIZE[1] / 2]
                        }));
                    } else {
                        marker.setIcon(busDotIcon);
                    }

                    marker.setPopupContent(`
                        <b>Bus ${busNo}</b><br>
                        Route: ${routeName}<br>
                        Status: ${checked ? 'Checked' : 'Not Checked'}<br>
                        Stops Remaining: ${Math.round(stopsRemaining)}<br>
                        Ticket Revenue: Rs ${(ticketRevenue || 0).toFixed(2)}<br>
                        Fine Revenue: Rs ${(fineRevenue || 0).toFixed(2)}<br>
                        Total Revenue: Rs ${totalRevenue}<br>
                        Mileage: ${(mileage || 1.75).toFixed(2)} km/kg CNG<br>
                        Route Completions (24h): ${routeCompletions}
                    `);

                    if (stopCircles[busNo] && !nearbyStop) {
                        map.removeLayer(stopCircles[busNo]);
                        delete stopCircles[busNo];
                    } else if (nearbyStop && !stopCircles[busNo]) {
                        stopCircles[busNo] = L.circle([latitude, longitude], {
                            radius: 50,
                            color: '#3182ce',
                            fillColor: '#90cdf4',
                            fillOpacity: 0.2
                        }).addTo(map);
                    } else if (stopCircles[busNo]) {
                        stopCircles[busNo].setLatLng([latitude, longitude]);
                    }
                } else {
                    const icon = useLabels ? L.divIcon({
                        className: 'bus-label-container',
                        html: `
                            <div class="bus-label ${checked ? 'checked' : ''}">
                                ${busNo} (${routeName})
                            </div>
                            ${counterHtml}
                        `,
                        iconSize: BUS_LABEL_SIZE,
                        iconAnchor: [BUS_LABEL_SIZE[0] / 2, BUS_LABEL_SIZE[1] / 2]
                    }) : busDotIcon;

                    busMarkers[busNo] = L.marker([latitude, longitude], { icon })
                        .addTo(map)
                        .bindPopup(`
                            <b>Bus ${busNo}</b><br>
                            Route: ${routeName}<br>
                            Status: ${checked ? 'Checked' : 'Not Checked'}<br>
                            Stops Remaining: ${Math.round(stopsRemaining)}<br>
                            Ticket Revenue: Rs ${(ticketRevenue || 0).toFixed(2)}<br>
                            Fine Revenue: Rs ${(fineRevenue || 0).toFixed(2)}<br>
                            Total Revenue: Rs ${totalRevenue}<br>
                            Mileage: ${(mileage || 1.75).toFixed(2)} km/kg CNG<br>
                            Route Completions (24h): ${routeCompletions}
                        `);
                }
            }

            if (userMarker) {
                const nearest = findNearestLocations(
                    userMarker.getLatLng().lat,
                    userMarker.getLatLng().lng,
                    visibleBuses,
                    stops
                );
                updateNearestDisplay(nearest.nearestStop, nearest.nearestBuses, nearest.nearbyStops);
            }

            Object.keys(busStopMarkers).forEach(stopName => {
                if (!useLabels && busStopMarkers[stopName]) {
                    map.removeLayer(busStopMarkers[stopName]);
                    delete busStopMarkers[stopName];
                }
            });

            if (useLabels) {
                stops.forEach(stop => {
                    if (!busStopMarkers[stop.name]) {
                        busStopMarkers[stop.name] = L.marker([stop.latitude, stop.longitude], { icon: stopIcon })
                            .addTo(map)
                            .bindPopup(`<b>${stop.name}</b>`);
                    }
                });
            }
        }

        function animateMarker(marker, startLatLng, endLatLng) {
            const steps = 10;
            let currentStep = 0;

            function step() {
                if (currentStep <= steps) {
                    const t = currentStep / steps;
                    const lat = startLatLng.lat + (endLatLng.lat - startLatLng.lat) * t;
                    const lng = startLatLng.lng + (endLatLng.lng - startLatLng.lng) * t;
                    marker.setLatLng([lat, lng]);
                    currentStep++;
                    requestAnimationFrame(step);
                }
            }

            requestAnimationFrame(step);
        }

        function checkGeolocationPermission() {
            if (navigator.permissions && navigator.permissions.query) {
                navigator.permissions.query({ name: 'geolocation' }).then(result => {
                    if (result.state === 'granted') {
                        hasGeoPermission = true;
                        goToUserLocation();
                    } else if (result.state === 'prompt') {
                        goToUserLocation();
                    }
                });
            } else {
                goToUserLocation();
            }
        }

        function goToUserLocation() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(
                    position => {
                        const { latitude, longitude } = position.coords;
                        if (!userMarker) {
                            userMarker = L.marker([latitude, longitude], { icon: userIcon })
                                .addTo(map)
                                .bindPopup('You are here');
                        } else {
                            userMarker.setLatLng([latitude, longitude]);
                        }
                        map.setView([latitude, longitude], 15);
                        const nearest = findNearestLocations(latitude, longitude, allBuses, initialBusStops);
                        updateNearestDisplay(nearest.nearestStop, nearest.nearestBuses, nearest.nearbyStops);
                        updateNearbyBuses();
                    },
                    err => {
                        console.error('Geolocation error:', err);
                    }
                );
            }
        }

        const socket = io({
            transports: ['websocket', 'polling'],
            reconnectionAttempts: 5
        });

        socket.on('connect', () => {
            console.log('Socket.io connected');
        });

        socket.on('busUpdate', ({ buses, busStops }) => {
            initialBusStops = busStops;
            updateBusMarkers(buses, busStops);
            fetchChartData();
        });

        socket.on('connect_error', (err) => {
            console.error('Socket.io connection error:', err);
        });

        socket.on('disconnect', () => {
            console.log('Socket.io disconnected');
        });

        map.on('zoomend', () => {
            const zoom = map.getZoom();
            socket.emit('zoomLevel', zoom);
            adjustMarkerOpacity(zoom);
            updateBusMarkers(allBuses, initialBusStops);
        });

        updateBusMarkers(initialBuses, initialBusStops);
    </script>
</body>
</html>